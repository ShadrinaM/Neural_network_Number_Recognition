class HiddenLayer : Layer
    {
        public HiddenLayer(int non, int nopn, NeuronType nt, string type) : base(non, nopn, nt, type)
        {

        }

        public override void Recognize(NetWork net, Layer nextLayer)
        {
            double[] hidden_out = new double[Neurons.Length];

            for(int i = 0; i < Neurons.Length; i++)
                hidden_out[i] = Neurons[i].Output;

            nextLayer.Data = hidden_out;
        }

        public override double[] BackwardPass(double[] stuff)
        {
            double[] gr_sum = new double[numofprevneurouns];

            // здесь пропишем обучение нейронной сети

            return gr_sum;
        }


    }
































class InputLayer
    {
        //поля
        private Random random = new Random();

        private double[,] trainset = new double[100, 16]; //100 изображений, 15 пикселей + желаемый отклик
        private double[,] testset = new double[10, 16];

        //свойства
        public double[,] Trainset { get => trainset; }

        public double[,] Testset { get => testset; }

        public InputLayer(NetworkMode nm){
            string path = AppDomain.CurrentDomain.BaseDirectory;
            string[] tmpStr;
            string[] tmpArrStr;
            double[] tmpArr;

            switch (nm)
            {
                case NetworkMode.Train:
                    tmpArrStr = File.ReadAllLines(path + "train.text");
                    for (int i = 0; i < tmpArrStr.Length; i++)
                    {
                        tmpStr = tmpArrStr[i].Split();
                        tmpArr = new double[tmpStr.Length];
                        for (int j = 0; j < tmpArrStr.Length; j++)
                        {
                            tmpArr[j] = double.Parse(tmpStr[j], System.Globalization.CultureInfo.InvariantCulture);
                        }
                    }
                    //метод перетасовки Фишера-Йетса
                    for (int n = trainset.GetLength(0) - 1; n >= 1; n--)
                    {
                        int j = random.Next(n + 1);
                        double[] temp = new double[trainset.GetLength(1)];

                        for (int i = 0; i < trainset.GetLength(1); i++)
                        {
                            temp[i] = trainset[n, i];
                        }
                        for (int i = 0; i < trainset.GetLength(1); i++)
                        {
                            trainset[n, i] = trainset[j, i];
                            trainset[j, i] = temp[i];
                        }
                    }
                    break;
                case NetworkMode.Test:
                    tmpArrStr = File.ReadAllLines(path + "test.text");

                    break;
                case NetworkMode.Recogn:
                    break;

            } 

        }
    }




























class NetWork
    {
        private InputLayer input_layer = null;
        private HiddenLayer hidden_layer1 = new HiddenLayer(70, 15,NeuronType.Hidden,nameof(hidden_layer1));
        private HiddenLayer hidden_layer2 = new HiddenLayer(34, 70, NeuronType.Hidden, nameof(hidden_layer2));
        private OutputLayer output_layer = new OutputLayer(10, 34, NeuronType.Output, nameof(output_layer));

        public double[] fact = new double[10];

        //среднее значение энергии ошибки
        private double e_error_avr;

        public double E_error_avr
        {
            get => e_error_avr;
            set => e_error_avr = value;
        }

        public NetWork()
        {

        }

        public void Train(NetWork net)
        {
            int epoches = 70; // кол-во эпох обучения(кол-во прогонов программы)
            net.input_layer = new InputLayer(NetworkMode.Train); //инициализация входного слоя
            double tmpSumError;// временная переменная суммы ошибок
            double[] errors;//вектор сигнала ошибки
            double[] temp_gsums1;//вектор градиента 1 скрытого слоя
            double[] temp_gsums2;//вектор градиента 2 скрытого слоя


        }

        //прямой проход сети
        public void ForwardPass(NetWork net, double[] netInput)
        {
            net.hidden_layer1.Data = netInput;
            net.hidden_layer1.Recognize(null, net.hidden_layer2);
            net.hidden_layer2.Recognize(null, net.output_layer);
            net.output_layer.Recognize(net, null);
        }
    }


























class OutputLayer : Layer
    {
        public OutputLayer(int non, int nopn, NeuronType nt, string type) : base(non, nopn, nt, type)
        {

        }

        public override void Recognize(NetWork net, Layer nextLayer)
        {
            double e_sum = 0;

            for (int i = 0; i < Neurons.Length; i++)
                e_sum += Neurons[i].Output;

            for (int i = 0; i < Neurons.Length; i++)
                net.fact[i] = Neurons[i].Output / e_sum;
        }

        public override double[] BackwardPass(double[] stuff)
        {
            double[] gr_sum = new double[numofprevneurouns + 1];

            //код для обучения нейронной сети

            return gr_sum;
        }
    }